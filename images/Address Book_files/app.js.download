// global variabels
const main = document.querySelector('main');
const modeToggler = document.querySelector('.toggler');
const searchField = document.querySelector('.search');
const addContactBtn = document.querySelector('#new');
const emptyPage = document.querySelector('.empty-page');
const formWrapper = document.querySelector('.form-wrapper');
const contactDets = document.querySelector('.contact-details');
const form = document.querySelector('.form-wrapper .contact-form');
const saveBtn = document.querySelector('.save');
const cancelBtn = document.querySelector('.cancel');
// regex pattern
const patterns = {
    firstname: /^[A-Z][a-z]{0,9}$/,
    lastname: /^[A-Z][a-z]{0,9}$/,
    email: /^([a-zA-Z\d]+)@([a-z\d-]+)\.([a-z]{2,8})(\.[a-z]{2,8})?$/,
    phone: /^\d{11}$/
};

// mode toggler

// function definitions

// function to hide the 'grandparent' when the cancel button is clicked
main.addEventListener('click', (e) => {
    if(e.target.classList.contains('cancel')) {
        e.target.parentElement.parentElement.classList.add('hidden');
    }
});

// function to show the right form for the right button click (add or edit form)
const displayForm = (headerText, buttonText) => {
    let html = `
        <h1>${headerText}</h1>
          <span class="fas fa-times cancel"></span>
          <div class="form-group">
            <label>First Name</label>
            <input type="text" class="form-control" name="firstname" required />
            <p>
              You must enter a word not more than 10 characters <br />
              must begin with a capital letter
            </p>
          </div>
          <div class="form-group">
            <label>Last Name</label>
            <input type="text" class="form-control" name="lastname" required />
            <p>
              You must enter a word not more than 10 characters <br />
              must begin with a capital letter
            </p>
          </div>
          <div class="form-group">
            <label>Email</label>
            <input type="text" class="form-control" name="email" required />
            <p>Email must be a valid email. e.g. you@email.com.</p>
          </div>
          <div class="form-group">
            <label>Phone</label>
            <input type="number" class="form-control" name="phone" required />
            <p>Phone number must be 11 digits</p>
          </div>
          <input type="submit" value="${buttonText}" class="btn btn-primary save" />
          <input type="button" value="cancel" class="btn btn-primary cancel" />
    `;
    form.innerHTML = html;
};

// adding an event listener to the add button to show the form
addContactBtn.addEventListener('click', () => {
    if(formWrapper.classList.contains('hidden')) {
        formWrapper.classList.remove('hidden');
        displayForm('Add Contact', 'Save');        
    }
});


// function to get a reference to all the input fields
const getInputs = () => {
    const inputs = document.querySelectorAll('.contact-form .form-control');
    return inputs;
};

// function to generate the user detail
const generateTemplate = contactInfo => {
    const html = `
        <li>
            <div class="contact">
                <p>${contactInfo.firstname}</p>
                <p>${contactInfo.lastname}</p>
            </div>
            <div class="arrow"><i class="fas fa-long-arrow-alt-right"></i></div>
    </li>
    `;
    contactDets.innerHTML += html;
};

// function to validate the input fields
const validateInputs = (inputField, regex) => {
    if(!regex.test(inputField.value)) {
        inputField.classList.add('invalid');
    } else {
        inputField.classList.remove('invalid');
    }
};

// function to extract data from a form field
const getDetails = () => {
    /* the key of the contact object is the same as the value of the input field with the same name 
    as the field */
    const contact = {
        firstname: getInputs()[0].value,
        lastname: getInputs()[1].value,
        email: getInputs()[2].value,
        phone: getInputs()[3].value
    };
    return contact;
};

// submiting the form
form.addEventListener('submit', (e) => {
    e.preventDefault();
    let validInputs = [];
    /*the way this works is that when the form is submitted, each input field is tested with its
    appropriate pattern and if it passes that pattern, input field is added to an array
    i did it this way to confirm that all input fields are filled properly */
    getInputs().forEach(input => {
        validateInputs(input, patterns[input.attributes.name.value]);  
        if(!input.classList.contains('invalid')) {
            validInputs.push(input);
        }

        if(validInputs.length == getInputs().length) {
            let contactDetail = getDetails();
            // checking to see if the page that displays the image for empty disappears
            if(!emptyPage.classList.contains('hidden')) {
                emptyPage.classList.add('hidden');
                generateTemplate(contactDetail);
                form.reset();
            }
            formWrapper.classList.add('hidden');
        }     
    });
});


